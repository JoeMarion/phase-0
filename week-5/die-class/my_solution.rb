# Die Class 1: Numeric

# I worked on this challenge [by myself, with: ]

# I spent [1.5] hours on this challenge.

# 0. Pseudocode

# Input: The sides of the die is the input
# Output: The output of die.roll is a random number generated by the number of sides on the die
# Steps:

# Initialize with the input of sides
# Set an instance equal to the input
# raise an error if the input is lower than one
# define sides
# define roll that randomizes the number + 1 because index starts with 0 and we want a standard 1 - sides answer not 0 - sides answer.


# 1. Initial Solution

class Die
  def initialize(sides)
    @sides = sides
    if @sides < 1
      raise ArgumentError.new("Please use a higher number than 0")
    end
  end

  attr_reader :sides

  def roll
    rand(@sides) + 1
  end
end



# 3. Refactored Solution






__END__

# 4. Reflection

What is an ArgumentError and why would you use one?

ArgumentError is for the message when an argument is raised to display to the user so that they know what is wrong.

What new Ruby methods did you implement? What challenges and successes did you have in implementing them?

Something new that I used was the attr_reader to be able to define an instance variable.

What is a Ruby class?

Classes allow you to write more dynamic programs. It contains methods that allow you to be called on different objects outside of one method.

Why would you use a Ruby class?

Ruby Classes are helpful because if you wanted to perform actions on groups of different objects you could make a class that would be accessible to all the objects instead of a method.

What is the difference between a local variable and an instance variable?

A local variable doesn't need to be initialized and is valid within the local scope. An instance variable is created once it has been initialized and available within the class.

Where can an instance variable be used?

Within the class once it has been initialized.